(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{622:function(t,i,e){"use strict";e.r(i);var v=e(5),_=Object(v.a)({},(function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("ul",[e("li",[e("p",[t._v("git init   ---\x3e初始化仓库")])]),t._v(" "),e("li",[e("p",[t._v("git clone 远程项目地址             ---\x3e复制远程仓库/仓库中的项目到电脑本地")])]),t._v(" "),e("li",[e("p",[t._v("git add .                                  ---\x3e将本地项目保存至暂存区")])]),t._v(" "),e("li",[e("p",[t._v("git commit -m\"第一次提交\"                ---\x3e '说明'提交至本地仓库")])]),t._v(" "),e("li",[e("p",[t._v("git remote add origin 'http://git.....远程项目地址'        ---\x3e 连接远程仓库")])]),t._v(" "),e("li",[e("p",[t._v("git push -u origin master     ---\x3e将本地项目上传至远程仓库")])]),t._v(" "),e("li",[e("p",[t._v("git pull            ---\x3e拉取/同步远程仓库的代码到本地")])])]),t._v(" "),e("h2",{attrs:{id:"版本更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本更新"}},[t._v("#")]),t._v(" 版本更新：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("git status   ---\x3e 查看本地状态跟远程仓库状态，如果没有同步，会显示没有同步的文件为红色")])]),t._v(" "),e("li",[e("p",[t._v("git add .")])]),t._v(" "),e("li",[e("p",[t._v('git commit -m"版本更新"')])]),t._v(" "),e("li",[e("p",[t._v("git push")])]),t._v(" "),e("li",[e("p",[t._v("git pull")])])]),t._v(" "),e("h2",{attrs:{id:"创建分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建分支"}},[t._v("#")]),t._v(" 创建分支")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("git bash     ---\x3e 首先打开环境")])]),t._v(" "),e("li",[e("p",[t._v("git branch   ---\x3e 查看有哪几个分支")])]),t._v(" "),e("li",[e("p",[t._v("git branch 分支名称   ---\x3e 创建分支")])]),t._v(" "),e("li",[e("p",[t._v("git branch  ---\x3e 查看有哪几个分支（创建完成）")])]),t._v(" "),e("li",[e("p",[t._v("git checkout 分支名 ---\x3e切换到某一分支   (git switch 分支名 --\x3e注意：在 Git 2.23 版本中，引入了一个名为 git switch 的新命令，")]),t._v(" "),e("ul",[e("li",[t._v("​                                                               最终会取代 git checkout，因为 checkout 作为单个命令有点超载（它承载了很多独立的功能）")]),t._v(" "),e("li",[t._v("​                                                               --\x3e对了，有个更简洁的方式：如果你想创建一个新的分支同时切换到新创建的分支的话，")]),t._v(" "),e("li",[t._v("​                                                               可以通过 git checkout -b 分支名  来实现。记住这里可checkout不能换成switch哦，错误语句 )")])])]),t._v(" "),e("li",[e("p",[t._v("git push origin 分支名 ---\x3e提交代码到指定分支")])]),t._v(" "),e("li",[e("p",[t._v("git rebase master  ---\x3e 如：此时正在*lyk分支，   该语句的意思是将lyk分支重基到master分支上，即是重新弄一个副本分支lyk到master分支上，从而实现合并。")])]),t._v(" "),e("li",[e("p",[t._v("git merge master  ---\x3e如此时正在*lyk分支,  该语句的意思是将lyk分支合并到master分支上，即是lyk分支指向master分支")])]),t._v(" "),e("li",[e("p",[t._v("git log    ---\x3e查看提交次数信息。")])]),t._v(" "),e("li",[e("p",[t._v("git reset --hard 回退的哈希数    ---\x3e回退到某个提交的那次版本信息")])]),t._v(" "),e("li",[e("p",[t._v("git reflog  ---\x3e查看历史版本信息（即命令操作的历史）")])]),t._v(" "),e("li",[e("p",[t._v("git push origin HEAD --force ---\x3e本地修改同步到云端")])])])])}),[],!1,null,null,null);i.default=_.exports}}]);