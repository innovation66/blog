(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{675:function(v,e,t){"use strict";t.r(e);var _=t(5),l=Object(_.a)({},(function(){var v=this,e=v.$createElement,t=v._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h3",{attrs:{id:"认识生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#认识生命周期"}},[v._v("#")]),v._v(" 认识生命周期")]),v._v(" "),t("ul",[t("li",[v._v("什么是生命周期呢？\n"),t("ul",[t("li",[v._v("每个组件都可能会经历从创建、挂载、更新、卸载等一系列的过程；")]),v._v(" "),t("li",[v._v("在这个过程中的某一个阶段，用于可能会想要添加一些属于自己的代码逻辑（比如组件创建完后就请求一些服务器数据）；")]),v._v(" "),t("li",[v._v("但是我们如何可以知道目前组件正在哪一个过程呢？Vue 给我们提供了组件的生命周期函数；")])])]),v._v(" "),t("li",[v._v("生命周期函数：\n"),t("ul",[t("li",[v._v("生命周期函数是一些钩子函数，在某个时间会被 Vue 源码内部进行回调；")]),v._v(" "),t("li",[v._v("通过对生命周期函数的回调，我们可以知道目前组件正在经历什么阶段；")]),v._v(" "),t("li",[v._v("那么我们就可以在该生命周期中编写属于自己的逻辑代码了；")])])])]),v._v(" "),t("h3",{attrs:{id:"组件的生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件的生命周期"}},[v._v("#")]),v._v(" 组件的生命周期")]),v._v(" "),t("ol",[t("li",[v._v("beforeCreate( )——准备创建\n"),t("ol",[t("li",[v._v("创建组件实例")])])]),v._v(" "),t("li",[v._v("created( )——创建完成\n"),t("ol",[t("li",[v._v("template 模板编译")]),v._v(" "),t("li",[v._v("**重要操作: **\n"),t("ol",[t("li",[t("strong",[v._v("发送网络请求")])]),v._v(" "),t("li",[t("strong",[v._v("事件监听")])]),v._v(" "),t("li",[t("strong",[v._v("watch 数据监听")])])])])])]),v._v(" "),t("li",[v._v("beforeMount( )—挂载之前\n"),t("ol",[t("li",[v._v("挂在到虚拟 DOM(JS)")]),v._v(" "),t("li",[v._v("虚拟 DOM->真实的 DOM->界面看到的内容")])])]),v._v(" "),t("li",[v._v("mounted( )——挂载完成\n"),t("ol",[t("li",[v._v("数据更新 message 改变")]),v._v(" "),t("li",[t("strong",[v._v("重要操作")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("获取 DOM")])]),v._v(" "),t("li",[t("strong",[v._v("使用 DOM")])])])])])]),v._v(" "),t("li",[v._v("beforeUpdate( )——更新之前\n"),t("ol",[t("li",[v._v("根据最新的数据生成性的 VNode 生产新的虚拟 DOM->真实 DOM")])])]),v._v(" "),t("li",[v._v("updated( )——更新完成\n"),t("ol",[t("li",[v._v("不再销毁 v-if = false 的标签")])])]),v._v(" "),t("li",[t("strong",[v._v("activated( )——当组件在 keep-alive 内被切换的时候它的 mounted( ) 被取代为 activated")])]),v._v(" "),t("li",[t("strong",[v._v("deactivated( )——当组件在 keep-alive 内被切换的时候它的 unmounted( ) 被取代为 deactivated")])]),v._v(" "),t("li",[v._v("beforeUnmount( )—卸载之前\n"),t("ol",[t("li",[v._v("将之前挂载在虚拟 DOM 中的 VNode 从虚拟 DOM 中移除")])])]),v._v(" "),t("li",[v._v("unmounted( )——卸载完成\n"),t("ol",[t("li",[v._v("将组件实例销毁")]),v._v(" "),t("li",[t("strong",[v._v("重要操作")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("回收的操作(取消事件监听)")])])])])])]),v._v(" "),t("li",[v._v("errorCaptured——返回子孙组件中的错误")]),v._v(" "),t("li",[v._v("renderTracked——虚拟 DOM 重新渲染时调用。接收 "),t("code",[v._v("debugger event")]),v._v(" 作为参数。告诉你哪个操作跟踪了组件以及该操作的目标对象和键。")]),v._v(" "),t("li",[v._v("renderTiggered——虚拟 DOM 重新渲染被触发时调用。接收 "),t("code",[v._v("debugger event")]),v._v(" 作为参数。告诉你是什么操作触发了重新渲染，以及该操作的目标对象和键")])]),v._v(" "),t("h3",{attrs:{id:"生命周期的流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生命周期的流程"}},[v._v("#")]),v._v(" 生命周期的流程")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/innovation66/picgo/main/image-20210816111600695-16594050010387.png",alt:"image-20210816111600695"}})])])}),[],!1,null,null,null);e.default=l.exports}}]);